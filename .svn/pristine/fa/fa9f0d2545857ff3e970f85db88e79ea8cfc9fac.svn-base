// Variables
var pauseGame = false; // Keeps track of game if paused
var myGamePiece = []; // Array of game pieces
var height;
var width;
var x;
var y;
var color;
var isPaused = document.getElementById("is_paused");

// --GAME PAUSE HANDLING--
// Listens for user pressing P key
// If true, run togglePause()
window.addEventListener('keydown', function(e) {
  var key = e.keyCode;
  if (key===80) { // Denotes the 'p' key
    togglePause();
  }
});

// Handles game pause event
function togglePause() {
  if (pauseGame!=true) {
    pauseGame = true;
    console.log("Game paused");
    isPaused.innerHTML = "Game paused";
  } else if (pauseGame==true) {
    pauseGame = false;
    console.log("Game not paused");
    isPaused.innerHTML = "Game not paused";
  }
}
// --END OF GAME PAUSE HANDLING--

// Function to start the game
function startGame() {
  // Set up game area
  // Variable to keep track of score
  var globalScore = 0;
  // Use component constructor to create 4 squares
  myGamePiece[0] = new component(60, 60, "red", 150, 280);
  myGamePiece[1] = new component(60, 60, "red", 270, 280);
  myGamePiece[2] = new component(60, 60, "red", 390, 280);
  myGamePiece[3] = new component(60, 60, "red", 510, 280);
  // Create the ground
  ground = new component(720, 200, "blue", 0, 280);
  myGameArea.start();
}


// This is an object
var myGameArea = {
  // Create a canvas object
  canvas : document.createElement("canvas"),
  start : function() {
    this.canvas.width = 720;    // Set canvas width
    this.canvas.height = 480;   // Set canvas height
    this.context = this.canvas.getContext("2d");
    // inserts canvas as the first childnode of the body element
    document.body.insertBefore(this.canvas, document.body.childNodes[0]);
    // Updates game area every 20th millisecond (50 frames per second)
    this.interval = setInterval(updateGameArea, 20);
  },
  // This is a method to clear the canvas
  // It might seem unnecessary to clear the game area at every update. However, if we leave out the clear() method, all movements of the component will leave a trail of where it was positioned in the last frame:
  clear : function() {
    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
  }
}

// This allows the pieces to move
function movePiece(myGamePiece) {
  if (myGamePiece.y<200) {
    myGamePiece.speedY += 3;
    // if (myGamePiece.y==100)
    //   myGamePiece.maxHeight = true;
  } else {
    myGamePiece.speedY -= 3;
    // if (myGamePiece.y==280)
    //   myGamePiece.maxHeight = false;
  }
}

// Constructor to create a red block
function component(width, height, color, x, y, type) {
  // this.maxHeight = false;
  this.width = width;           // Width of the block
  this.height = height;         // Height of block
  this.x = x;                   // x coordinate
  this.y = y;                   // y coordinate
  this.speedY = 0;
  this.type = type;             // What kind of component?
  // If the component type is 'text', do this
  if (this.type == "text") {
    ctx.font = this.width + " " + this.height;
    ctx.fillStyle = color;
    ctx.fillText(this.text, this.x, this.y);
  } 
  // component has an update method of its own
  this.update = function(){
    ctx = myGameArea.context;
    ctx.fillStyle = color;
    ctx.fillRect(this.x, this.y, this.width, this.height);
  }
  this.newPos = function() {
      this.y += this.speedY;
  }
}

// Updates game area every 20th millisecond (50 frames per second)
function updateGameArea() {
  if (pauseGame==false) {
    myGameArea.clear();     // myGame calls method to clear the canvas
    // myGamePiece.y += 1;
    // Moves pieces
    for (var i=0; i<myGamePiece.length; i++) {
      movePiece(myGamePiece[i]);
    }
    for (var i=0; i<myGamePiece.length; i++) {
      myGamePiece[i].newPos();
    }
    // Populate the canvas with squares
    for (var j=0; j<myGamePiece.length; j++) {
      myGamePiece[j].update();    // myGame calls method to update the canvas
    }
    ground.update();         // myGame calls method to update the canvas
    // Update the score on the screen
  }
}